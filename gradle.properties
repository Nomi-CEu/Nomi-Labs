modName = Nomi Labs

# This is a case-sensitive string to identify your mod. Convention is to use lower case.
modId = nomilabs

modGroup = com.nomiceu.nomilabs

# Version of your mod.
# This field can be left empty if you want your mod's version to be determined by the latest git tag instead.
modVersion = 0.12.10

# Whether to use the old jar naming structure (modid-mcversion-version) instead of the new version (modid-version)
includeMCVersionJar = false

# The name of your jar when you produce builds, not including any versioning info
modArchivesBaseName = NomiLabs

# Will update your build.gradle automatically whenever an update is available
autoUpdateBuildScript = false

minecraftVersion = 1.12.2

# Select a username for testing your mod with breakpoints. You may leave this empty for a random username each time you
# restart Minecraft in development. Choose this dependent on your mod:
# Do you need consistent player progressing (for example Thaumcraft)? -> Select a name
# Do you need to test how your custom blocks interacts with a player that is not the owner? -> leave name empty
# Alternatively this can be set with the 'DEV_USERNAME' environment variable.
developmentEnvironmentUserName = Developer

# Additional arguments applied to the JVM when launching minecraft
# Syntax: -arg1=value1;-arg2=value2;...
# Example value: -Dmixin.debug.verify=true;-XX:+UnlockExperimentalVMOptions
additionalJavaArguments =

# Enables using modern java syntax (up to version 17) via Jabel, while still targeting JVM 8.
# See https://github.com/bsideup/jabel for details on how this works.
# Using this requires that you use a Java 17 JDK for development.
enableModernJavaSyntax = true

# Enables runClient/runServer tasks for Java 17 and Java 21 using LWJGL3ify.
# This is primarily used to test if your mod is compatible with platforms running
# Minecraft 1.12.2 on modern versions of Java and LWJGL, and assist in fixing any problems with it.
# Using this requires that you use a Java 17/Java 21 JDK for development.
enableJava17RunTasks = false

# Generate a class with String fields for the mod id, name and version named with the fields below
generateGradleTokenClass = com.nomiceu.nomilabs.Tags
gradleTokenModId =
gradleTokenModName =
gradleTokenVersion = VERSION

# In case your mod provides an API for other mods to implement you may declare its package here. Otherwise, you can
# leave this property empty.
# Example value: apiPackage = api + modGroup = com.nomiceu.nomilabs -> com.nomiceu.nomilabs.api
apiPackage =

# Specify the configuration file for Forge's access transformers here. It must be placed into /src/main/resources/
# There can be multiple files in a comma-separated list.
# Example value: mymodid_at.cfg,jei_at.cfg
accessTransformersFile =

# Provides setup for Mixins if enabled. If you don't know what mixins are: Keep it disabled!
usesMixins = true
# Specify the package that contains all of your Mixins. You may only place Mixins in this package or the build will fail!
mixinsPackage = mixin
# Specify the core mod entry class if you use a core mod. This class must implement IFMLLoadingPlugin!
# Example value: coreModClass = asm.FMLPlugin + modGroup = com.nomiceu.nomilabs -> com.nomiceu.nomilabs.asm.FMLPlugin
coreModClass = core.LabsCore
# If your project is only a consolidation of mixins or a core mod and does NOT contain a 'normal' mod (meaning that
# there is no class annotated with @Mod) you want this to be true. When in doubt: leave it on false!
containsMixinsAndOrCoreModOnly = false

# Outputs pre-transformed and post-transformed loaded classes to run/CLASSLOADER_TEMP. Can be used in combination with
# diff to see exactly what your ASM or Mixins are changing in the target file.
# Optionally can be specified with the 'CORE_MOD_DEBUG' env var. Will output a lot of files!
enableCoreModDebug = false

# Enables Mixins even if this mod doesn't use them, useful if one of the dependencies uses mixins.
forceEnableMixins = false

# Adds CurseMaven, Modrinth Maven, BlameJared maven, and some more well-known 1.12.2 repositories
includeWellKnownRepositories = true

# Adds JEI and TheOneProbe to your development environment. Adds them as 'implementation', meaning they will
# be available at compiletime and runtime for your mod (in-game and in-code).
# Overrides the above setting to be always true, as these repositories are needed to fetch the mods
includeCommonDevEnvMods = false


# If enabled, you may use 'shadowCompile' for dependencies. They will be integrated in your jar. It is your
# responsibility check the licence and request permission for distribution, if required.
usesShadowedDependencies = false
# If disabled, won't remove unused classes from shaded dependencies. Some libraries use reflection to access
# their own classes, making the minimization unreliable.
minimizeShadowedDependencies = true
# If disabled, won't rename the shadowed classes.
relocateShadowedDependencies = true

# Separate run directories into "run/client" for runClient task, and "run/server" for runServer task.
# Useful for debugging a server and client simultaneously. If not enabled, it will be in the standard location "run/"
separateRunDirectories = true


# Publishing to modrinth requires you to set the MODRINTH_API_KEY environment variable to your current modrinth API token.

# The project's ID on Modrinth. Can be either the slug or the ID.
# Leave this empty if you don't want to publish on Modrinth.
# Alternatively this can be set with the 'MODRINTH_PROJECT_ID' environment variable.
modrinthProjectId =

# The project's relations on Modrinth. You can use this to refer to other projects on Modrinth.
# Syntax: scope1-type1:name1;scope2-type2:name2;...
# Where scope can be one of [required, optional, incompatible, embedded],
#       type can be one of [project, version],
#       and the name is the Modrinth project or version slug/id of the other mod.
# Example: required-project:jei;optional-project:top;incompatible-project:gregtech
modrinthRelations =


# Publishing to CurseForge requires you to set the CURSEFORGE_API_KEY environment variable to one of your CurseForge API tokens.

# The project's numeric ID on CurseForge. You can find this in the About Project box.
# Leave this empty if you don't want to publish on CurseForge.
# Alternatively this can be set with the 'CURSEFORGE_PROJECT_ID' environment variable.
curseForgeProjectId = 932060

# The project's relations on CurseForge. You can use this to refer to other projects on CurseForge.
# Syntax: type1:name1;type2:name2;...
# Where type can be one of [requiredDependency, embeddedLibrary, optionalDependency, tool, incompatible],
#       and the name is the CurseForge project slug of the other mod.
# Example: requiredDependency:railcraft;embeddedLibrary:cofhlib;incompatible:buildcraft
curseForgeRelations = requiredDependency:codechicken-lib-1-8;\
  requiredDependency:gregtech-ce-unofficial;\
  requiredDependency:gregicality-multiblocks;\
  requiredDependency:groovyscript;\
  requiredDependency:packmode;\
  requiredDependency:the-one-probe;\
  requiredDependency:had-enough-items;\
  requiredDependency:configanytime;\
  incompatible:gregtechce;\
  optionalDependency:storage-drawers;\
  optionalDependency:chameleon;\
  optionalDependency:framed-compacting-drawers;\
  optionalDependency:ender-io;\
  optionalDependency:endercore;\
  optionalDependency:chisel;\
  optionalDependency:ctm;\
  optionalDependency:ae2-extended-life;\
  optionalDependency:extended-crafting-nomifactory-edition;\
  optionalDependency:cucumber;\
  optionalDependency:ender-storage-1-8;\
  optionalDependency:draconic-evolution;\
  optionalDependency:brandons-core;\
  optionalDependency:redstone-flux;\
  optionalDependency:nuclearcraft-mod;\
  optionalDependency:extra-utilities;\
  optionalDependency:thermal-expansion;\
  optionalDependency:thermal-foundation;\
  optionalDependency:redstone-arsenal;\
  optionalDependency:cofh-world;\
  optionalDependency:cofh-core;\
  optionalDependency:libvulpes;\
  optionalDependency:advanced-rocketry;\
  optionalDependency:architecturecraft-tridev;\
  optionalDependency:effortless-building;\
  optionalDependency:better-questing-unofficial;\
  optionalDependency:controlling;\
  optionalDependency:default-world-generator-port;\
  optionalDependency:dme;\
  optionalDependency:ftb-library-legacy-forge;\
  optionalDependency:ftb-utilities-forge;\
  optionalDependency:top-addons;

# This project's release type on CurseForge and/or Modrinth
# Alternatively this can be set with the 'RELEASE_TYPE' environment variable.
# Allowed types: release, beta, alpha
releaseType = beta

# Generate a default changelog for releases. Requires git to be installed, as it uses it to generate a changelog of
# commits since the last tagged release.
generateDefaultChangelog = true

# Prevent the source code from being published
noPublishedSources = false


# Publish to a custom maven location. Follows a few rules:
# Group ID can be set with the 'ARTIFACT_GROUP_ID' environment variable, default to 'project.group'
# Artifact ID can be set with the 'ARTIFACT_ID' environment variable, default to 'project.name'
# Version can be set with the 'RELEASE_VERSION' environment variable, default to 'modVersion'
# For maven credentials:
# Username is set with the 'MAVEN_USER' environment variable, default to "NONE"
# Password is set with the 'MAVEN_PASSWORD' environment variable, default to "NONE"
customMavenPublishUrl =

# Enable spotless checks
# Enforces code formatting on your source code
# By default this will use the files found here: https://github.com/GregTechCEu/Buildscripts/tree/master/spotless
# to format your code. However, you can create your own version of these files and place them in your project's
# root directory to apply your own formatting options instead.
enableSpotless = true

# Enable JUnit testing platform used for testing your code.
# Uses JUnit 5. See guide and documentation here: https://junit.org/junit5/docs/current/user-guide/
enableJUnit = true

# Deployment debug setting
# Uncomment this to test deployments to CurseForge and Modrinth
# Alternatively, you can set the 'DEPLOYMENT_DEBUG' environment variable.
deploymentDebug = false


# Gradle Settings
# Effectively applies the '--stacktrace' flag by default
org.gradle.logging.stacktrace = all
# Sets default memory used for gradle commands. Can be overridden by user or command line properties.
# This is required to provide enough memory for the Minecraft decompilation process.
org.gradle.jvmargs = -Xmx3G


# Custom Dep Settings. Make sure to run Setup Workspace/Reload Gradle Project after changing.

# Whether to enable Storage Drawers and its deps in runtime. Enables Hand Framing Tool, and Drawer Key Fix.
# If this is set to false, the hand framing tool is disabled.
enable_storage_drawers = false

# Whether to enable Framed Compacting Drawers and its deps in runtime. Enables more of the Hand Framing Tool.
# Requires `enable_storage_drawers` to be set to true.
enable_framed_compact = false

# Whether to enable Ender IO and its deps in runtime. Enables Custom Capacitors & allows specifying Linear XP Scaling for EIO Machines.
enable_ender_io = false

# Whether to enable Chisel and its deps in runtime. Enables Chisel Blocks in Naq Reactors.
# If this is set to false, those blocks will be set to air.
enable_chisel = false

# Whether to enable AE2 in runtime. Enables AE2 Blocks in DME Sim Chamber and Naq Reactors.
# Also, for .56.5, also fixes mouse tweaks interactions with terminals, as well as inscriber recipes in GroovyScript.
# If this is set to false, those blocks will be set to air. The mixin will not apply.
enable_ae2 = false

# Whether to enable NAE2 in runtime. Requires enable_ae2 to be true.
enable_nae2 = false

# Whether to enable Betterer P2P in runtime. Requires enable_ae2 to be true.
enable_better_p2p = false

# Whether to enable DME in runtime. Enables the DME Sim Chamber.
enable_dme = false

# Whether to enable Extended Crafting in runtime. Enables Extended Crafting Blocks in DME Sim Chamber and Naq Reactors.
# If this is set to false, those blocks will be set to air.
enable_extended_crafting = false

# Whether to enable Draconic Evolution in runtime.
# Enables the energy core and reactor mixin improvements, and Draconic Evolution blocks in Universal Crystallizer.
# Also enables the Removal of Chaotic Upgrade Fusion Recipes.
# If this is set to false, the mixin will not apply, and those blocks will be set to air.
enable_draconic = false

# Whether to enable NuclearCraft in runtime. Enables the GTCEu crash mixin fix.
# If this is set to false, the mixin will not apply.
enable_nuclear = false

# Whether to enable Extra Utilities 2 in runtime. Enables the removal of frequency mixin, and the remappers to remove frequency.
# If this is set to false, the mixin and remappers will not apply.
enable_xu2 = false

# Whether to enable Advanced Rocketry in runtime. Enables the mixin which fixes Advanced Rocketry adding items for fluid blocks.
# This was fixed in later versions, but we cannot update due to another crash.
# If this is set to false, the mixin will not apply.
enable_rocketry = false

# Whether to enable Architecture Craft in runtime. Enables the mixin which adds more Architecture Craft Slopes, improves the Sawbench UI, fixes the Sawbench Particle Texture, and fixes Shapes' Harvest Tools and Levels in The One Probe.
# If this is set to false, the mixin will not apply.
enable_architecture_craft = false

# Whether to enable Effortless Building in runtime. Enables the mixin which improves clarity of Reach Upgrades.
# If this is set to false, the mixin will not apply.
enable_effortless_building = false

# Whether to enable FTB Utilities in runtime. Enables mixins which provide fixes relating to Ghost Items, and Effortless + FTB Utils Compat.
# If this is set to false, Effortless + FTB Utils Compat will not be applied, and the mixin will not apply.
enable_ftb_utils = false

# Whether to enable BQu in runtime. Enables Labs Tier Helper.
enable_bqu = false

# Whether to enable Controlling in runtime. Enables Controlling compat.
enable_controlling = false

# Whether to enable Default World Generator Port in runtime. Fixes GUI Rescaling Issues, adds a Cancel Button.
enable_default_world_gen_port = false

# Whether to enable TOP Addons in runtime. Fixes Error Messages with Architecture Craft 3.108, and issues with fluid localization.
# Requires Architecture Craft to also be enabled.
enable_top_addons = false

# Whether to enable Actually Additions in runtime. Allows specifying Linear XP Scaling for AA Machines.
enable_aa = false

# Whether to enable Ender Storage in runtime. Enables remappers to remap items in ender storage.
# If this is set to false, the remappers will not apply there.
enable_ender_storage = false

# Whether to enable Inventory BogoSorter in runtime. Fixes duplication glitch with Thermal Satchels.
enable_bogo = false

# Whether to enable FindMyItemsAndFluids in runtime. Fixes issues with a keybind not registering.
enable_find = false

# Whether to enable Thermal Expansion and its deps in runtime. These are used for the excitation coil textures.
# Also sets the Tome of Experience to have Linear XP Scaling.
# If this is set to false, the top of the excitation coil will have a null texture.
enable_thermal = false

# Whether to enable Mouse Tweaks in runtime. Useful for testing interactions with various GUIs.
enable_mouse_tweaks = false

# Whether to enable Biomes o Plenty in runtime. Fixes an issue with a crash with FTB Utils, due to a Labs Mixin.
enable_biomes_o_plenty = false
